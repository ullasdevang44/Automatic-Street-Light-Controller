Process Explanation
Step 1: Objective
The objective is to create a system that automatically turns ON streetlights in the dark and turns them OFF in the presence of sufficient light, simulating energy-efficient street lighting.
Step 2: Components and Circuit Connection
Components Used:

Arduino Uno: The brain of the project.
LDR (Light Dependent Resistor): A sensor that detects light intensity.
10kΩ Resistor: Used as a pull-down resistor for the LDR.
LED: Simulates a streetlight.
330Ω Resistor: Limits current to the LED.
Circuit Connection:

Connect one end of the LDR to +5V and the other to A0 (Analog pin) on the Arduino.
Place a 10kΩ resistor in parallel with the LDR, with one end connected to GND.
Connect the LED to pin 9 through a 330Ω resistor, and its other terminal to GND.
Step 3: Working Principle
LDR Behavior:

The LDR's resistance decreases as light intensity increases (daytime).
During low light (night), its resistance increases.
Voltage Divider Setup:

The LDR forms a voltage divider with the 10kΩ resistor. The voltage at the junction of the LDR and resistor is proportional to the light intensity.
This voltage is read by the Arduino via analog pin A0.
Threshold Logic:

A threshold value (e.g., 500) is used to compare the LDR's output.
If the LDR value is less than the threshold (dark environment), the LED turns ON.
If the LDR value is greater than the threshold (bright environment), the LED turns OFF.

Step 4: Code Explanation
Here’s a breakdown of the code:

1. Variable and Pin Declarations
cpp
Copy
Edit
const int LDR_PIN = A0;  // LDR connected to analog pin A0
const int LED_PIN = 9;   // LED connected to digital pin 9
int ldrValue = 0;        // Variable to store LDR value
const int threshold = 500; // Threshold for light detection
LDR_PIN: Pin connected to the LDR.
LED_PIN: Pin connected to the LED.
ldrValue: Stores the value read from the LDR.
threshold: Value to distinguish between day and night.
2. setup() Function
cpp
Copy
Edit
void setup() {
  pinMode(LED_PIN, OUTPUT);   // Set LED pin as output
  Serial.begin(9600);         // Start serial communication for debugging
}
The LED pin is set as an output to control the LED.
Serial Monitor is initialized to display LDR readings for debugging.
3. loop() Function
cpp
Copy
Edit
void loop() {
  ldrValue = analogRead(LDR_PIN); // Read the LDR value
  Serial.print("LDR Value: ");
  Serial.println(ldrValue);
The LDR value is read using analogRead().
The value (0–1023) is printed on the Serial Monitor for real-time monitoring.
4. Threshold Logic
cpp
Copy
Edit
  if (ldrValue < threshold) {
    digitalWrite(LED_PIN, HIGH);  // Turn ON the LED
    Serial.println("Streetlight ON");
  } else {
    digitalWrite(LED_PIN, LOW);   // Turn OFF the LED
    Serial.println("Streetlight OFF");
  }
  delay(100);
}
Condition: If the LDR value is below the threshold, the LED turns ON.
Else: If the LDR value is above the threshold, the LED turns OFF.
A delay(100) adds a small pause to stabilize readings.
Step 5: Uploading and Testing
Upload the Code:

Copy the code into the Arduino IDE.
Connect the Arduino to your PC using a USB cable.
Select the appropriate Board and COM Port in the Tools menu.
Click the Upload button.
Test the Circuit:

Vary the light falling on the LDR (use a flashlight or cover it with your hand).
Observe the LED turning ON/OFF based on the light conditions.
Step 6: Expected Output
Bright Light (Daytime): The Serial Monitor displays:

vbnet
Copy
Edit
LDR Value: 700
Streetlight OFF
The LED is OFF.

Low Light (Nighttime): The Serial Monitor displays:

graphql
Copy
Edit
LDR Value: 300
Streetlight ON
The LED is ON.

Flow Diagram
Start
Initialize pins and Serial Monitor.
Continuously read LDR values.
Compare the LDR value with the threshold.
If value < threshold → Turn ON LED.
Else → Turn OFF LED.
Repeat.
Applications
Street Lighting: Automate energy-efficient streetlights.
Home Automation: Control lights in homes and offices.
Smart Agriculture: Use similar setups for greenhouses or barns.
